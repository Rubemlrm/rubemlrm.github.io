I"M<p>E aqui vem o 3¬∫ artigo relativo aos artigos de perl. Neste artigo vou-vos ensinar a utilizar um dos ciclos de controlo mais utilizados em programa√ß√£o que √© o ciclo <strong>"if..else"</strong> e sua forma complexa <strong>"if..elsif"</strong> .Este ciclo serve para controlar o fluxo de dados de um programa, no sentido de que se uma condi√ß√£o for verdadeira vai realizar uma ac√ß√£o e se for falsa vai realizar outra.<a id="more"></a><a id="more-118"></a></p>
<p>O<strong> ciclo "if..else"</strong> divide-se em duas partes:</p>
<p>[perl]if (condi√ß√£o) {</p>
<p>#bloco de c√≥digo1</p>
<p>}else{</p>
<p>#bloco de c√≥digo2</p>
<p>}</p>
<p>[/perl]</p>
<p>Como podem ver tem uma estrutura muito simples .Mas para facilitar a vossa compreens√£o de como isto funciona vou explicar passo a passo o que est√° neste exemplo.</p>
<p>[perl]if (condi√ß√£o) {</p>
<p>#na primeira linha inicio o ciclo if dizendo que tem que verificar a condi√ß√£o que est√° entre "()"<strong>, </strong>caso esta condi√ß√£o seja verdadeira , ir√° ser #executado o bloco de c√≥digo1</p>
<p>}else { #caso seja falso ir√° executar o bloco de c√≥digo2</p>
<p>bloco de c√≥digo2</p>
<p>}#n√£o esquecer dos <strong>{}</strong></p>
<p>[/perl]</p>
<p>¬†</p>
<p>A primeira vez pode ser um pouco complicado .Mas agora vou dar um exemplo pr√°tico .Imaginem que que queremos fazer um script que analise um valor introduzido e diga se √© negativo ou positivo. Para tal fazemos o seguinte.</p>
<p>¬†</p>
<p>[perl]</p>
<p>#!/usr/bin/perl -w<br />
use strict;<br />
print "Introduza um n√∫meron";<br />
chomp(my $val = <STDIN>);&lt;/p&gt;
<p>if($val &gt; 0){<br />
print "n√∫mero √© positivon";<br />
}else{<br />
print "n√∫mero √© negativon";<br />
}</p>
<p>[/perl]</p>
<p>Nesta situa√ß√£o utilizamos o if para verificar se o n√∫mero √© positivo ou negativo. E agora voc√™s perguntam-se ent√£o e se tivermos mais do que 2 condi√ß√µes para analisar ou ent√£o neste programa de ver se √© positivo ou negativo como fazemos se o n√∫mero for 0. Bem para lidar com essas situa√ß√µes temos uma deriva√ß√£o do ciclo If que √© o "if .. elsif".</p>
<p>A sua estrutura de trabalho √© bastante parecida ao ciclo if simples , s√≥ que neste caso temos 2 ou mais condi√ß√µes para verificar. De seguida fica a estrutura de um ciclo "if..elsif".</p>
<p>[perl]</p>
<p>if (condi√ß√£o) {</p>
<p>#na primeira linha inicio o ciclo if dizendo que tem que verificar a condi√ß√£o que est√° entre¬†<strong>"()",¬†</strong>caso esta condi√ß√£o seja verdadeira , ir√° ser #executado o bloco de c√≥digo1</p>
<p>#bloco de c√≥digo1</p>
<p>}elsif(condi√ß√£o){ #caso a primeira condi√ß√£o n√£o seja verdade o ciclo ir√° verificar a segunda condi√ß√£o.</p>
<p>#bloco de c√≥digo2</p>
<p>}else{#por fim caso nenhuma destas condi√ß√µes sejam verdadeiras ent√£o ir√° executar o bloco de c√≥digo 3</p>
<p>#bloco de c√≥digo3</p>
<p>}</p>
<p>[/perl]</p>
<p>¬†</p>
<p>Como podem ver ¬†este tipo de estrutura oferece um controlo de dados um pouco mais complexa. Como n√£o poderia de deixar de fazer vou deixar um exemplo pr√°tico deste ciclo .E como tal vou pegar no programa anterior e irei usar este ciclo para verificar se o valor introduzido √© 0.</p>
<p>¬†</p>
<p>[perl]</p>
<p>#!/usr/bin/perl -w<br />
use strict;<br />
print "Introduza um n√∫meron";<br />
chomp(my $val = <STDIN>);&lt;/p&gt;
<p>if($val &gt; 0){<br />
print "n√∫mero √© positivon";<br />
}elsif($val &lt; 0){<br />
print "n√∫mero √© negativon";<br />
}else{<br />
print "o valor √© nulo";<br />
}</p>
<p>[/perl]</p>
<p>¬†</p>
<p>E dou por terminado este artigo. Qualquer quest√£o podem me contactar pelo twitter ou deixando um coment√°rio</p>
</STDIN></p></STDIN></p>
:ET